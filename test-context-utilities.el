#!/usr/bin/env emacs --script

;; Test context utilities implementation

(add-to-list 'load-path (expand-file-name "lisp" default-directory))

(require 'efrit-log)
(require 'efrit-common)
(require 'efrit-context)

(message "=== Testing Context Utilities ===")
(message "")

;; Test 1: Context state capture
(message "Test 1: Capture context state")
(with-temp-buffer
  (insert "Hello, world!")
  (goto-char 7)
  (let ((state (efrit-context-capture-state)))
    (if (and (efrit-context-state-p state)
             (= (efrit-context-state-point state) 7)
             (string-match "\\*temp\\*" (efrit-context-state-buffer-name state)))
        (message "✓ Context state captured correctly")
      (message "✗ Context state capture failed"))))

(message "")
(message "Test 2: Work log compression - minimal")
(let* ((work-log '((result1 . "code1") (result2 . "code2") (result3 . "code3")))
       (compressed (efrit-context-compress-work-log work-log 'minimal))
       (parsed (json-read-from-string compressed)))
  (if (and (= (alist-get 'steps parsed) 3)
           (string= (alist-get 'last_result parsed) "result1"))
      (message "✓ Minimal compression works correctly")
    (message "✗ Minimal compression failed: %S" parsed)))

(message "")
(message "Test 3: Work log compression - smart")
(let* ((work-log '(("long result that should be truncated" . "(very-long-elisp-code-here)")
                   ("result2" . "(code2)")
                   ("result3" . "(code3)")))
       (compressed (efrit-context-compress-work-log work-log 'smart))
       (parsed (json-read-from-string compressed)))
  (if (and (= (alist-get 'total_steps parsed) 3)
           (vectorp (alist-get 'recent parsed))
           (> (length (alist-get 'recent parsed)) 0))
      (message "✓ Smart compression works correctly")
    (message "✗ Smart compression failed: %S" parsed)))

(message "")
(message "Test 4: Context entry creation")
(let ((entry (efrit-context-create-entry "(+ 1 2)" "3")))
  (if (and (efrit-context-entry-p entry)
           (string= (efrit-context-entry-code entry) "(+ 1 2)")
           (string= (efrit-context-entry-result entry) "3")
           (efrit-context-state-p (efrit-context-entry-state entry)))
      (message "✓ Context entry created correctly")
    (message "✗ Context entry creation failed")))

(message "")
(message "Test 5: Code compression")
(let ((short-code "(+ 1 2)")
      (long-code "(buffer-substring-no-properties (point-min) (point-max) with-lots-of-extra-arguments-that-make-this-very-long)")
      (very-long (make-string 200 ?x)))
  (if (and (string= (efrit-context--compress-code short-code) short-code)
           (string-match "\\.\\.\\." (efrit-context--compress-code long-code))
           (= (length (efrit-context--compress-code very-long)) 100))
      (message "✓ Code compression works correctly")
    (message "✗ Code compression failed")))

(message "")
(message "Test 6: Result compression")
(let ((nil-result nil)
      (buffer-result "#<buffer test-buffer>")
      (long-result (make-string 300 ?x)))
  (if (and (string= (efrit-context--compress-result nil-result) "nil")
           (string= (efrit-context--compress-result buffer-result) "buffer:test-buffer")
           (string-match "\\.\\.\\.$" (efrit-context--compress-result long-result)))
      (message "✓ Result compression works correctly")
    (message "✗ Result compression failed")))

(message "")
(message "Test 7: Code classification")
(if (and (eq (efrit-context--classify-code "(eval-sexp '(+ 1 2))") 'evaluation)
         (eq (efrit-context--classify-code "(insert \"text\")") 'text-modification)
         (eq (efrit-context--classify-code "(find-file \"test.el\")") 'navigation)
         (eq (efrit-context--classify-code "(shell-command \"ls\")") 'external-command))
    (message "✓ Code classification works correctly")
  (message "✗ Code classification failed"))

(message "")
(message "=== All Context Utilities Tests Complete ===")
(kill-emacs 0)